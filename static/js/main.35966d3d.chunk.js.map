{"version":3,"sources":["faceApi.js","Custom Hook/useIsMount.js","Components/App.js","index.js"],"names":["loadModels","a","MODEL_URL","process","faceapi","console","log","message","getFullFaceDescription","blob","inputSize","scoreThreshold","OPTION","useTinyModel","src","img","withFaceLandmarks","withFaceDescriptors","fullDesc","App","useState","image","setImage","detectedFaces","setDetectedFaces","isMount","isMountRef","useRef","useEffect","current","useIsMount","handleImage","checkIsMount","input","document","getElementById","then","type","multiple","onClick","onChange","event","URL","createObjectURL","target","files","id","alt","style","width","height","map","detectedFace","detection","_box","x","y","crop","ReactDOM","render"],"mappings":"2SAMO,SAAeA,IAAtB,+B,4CAAO,4BAAAC,EAAA,6DACGC,EAAYC,qBADf,kBAIOC,IAAkCF,GAJzC,uBAKOE,IAAkCF,GALzC,uBAMOE,IAAiCF,GANxC,yDAQCG,QAAQC,IAAI,KAAMC,SARnB,2D,sBAgBA,SAAeC,EAAtB,kC,4CAAO,WAAsCC,GAAtC,qCAAAR,EAAA,6DAA4CS,EAA5C,+BAAwD,IACvDC,EAAiB,GACfC,EAAS,IAAIR,IAAgC,CAC/CM,YACAC,mBAEEE,GAAe,EANlB,kBAQiBT,IAAmBK,EAAKK,KARzC,cAQKC,EARL,iBASsBX,IACDW,EAAKH,GACpBI,kBAAkBH,GAClBI,sBAZN,eASKC,EATL,yBAaQA,GAbR,kCAeCb,QAAQC,IAAI,UAAW,KAAMC,SAf9B,2D,sBCjBA,IC2EQY,EA3EH,WAAO,IAAD,EACYC,mBAAS,MADrB,mBACPC,EADO,KACAC,EADA,OAE4BF,mBAAS,IAFrC,mBAEPG,EAFO,KAEQC,EAFR,KAIRC,EDJgB,WACtB,IAAMC,EAAaC,kBAAO,GAI1B,OAHAC,qBAAU,WACNF,EAAWG,SAAU,IACtB,IACIH,EAAWG,QCDFC,GAChBF,qBAAU,YACY,uCAAG,sBAAA3B,EAAA,0DACbwB,EADa,gCAEPzB,IAFO,iCAITqB,EAJS,gCAKHU,IALG,2CAAH,qDASlBC,KACD,CAACX,IAEJ,IAAMU,EAAW,uCAAG,4BAAA9B,EAAA,6DACVgC,EAAQC,SAASC,eAAe,aADtB,SAEV3B,EAAuByB,GAAOG,MAAK,SAAClB,GACtCM,EAAiBN,MAHL,2CAAH,qDAOjB,OACI,6BACI,2BACImB,KAAK,OACLC,UAAU,EACVC,QAAS,WACLjB,EAAS,MACTE,EAAiB,KAErBgB,SAAU,SAACC,GACPnB,EAASoB,IAAIC,gBAAgBF,EAAMG,OAAOC,MAAM,QAIpD,6BACI,6BACI,2CAEJ,yBACIC,GAAG,YACHhC,IAAKO,GAAgB,IACrB0B,IAAK1B,EAAQ,OAAS,GACtB2B,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAI5C7B,EACG,6BACI,6BACI,8CAEHE,EAAc4B,KAAI,SAACC,GAChB,IAAIH,EAAQG,EAAaC,UAAUC,KAAKL,MACpCC,EAASE,EAAaC,UAAUC,KAAKJ,OACrCK,EAAIH,EAAaC,UAAUC,KAAKC,EAChCC,EAAIJ,EAAaC,UAAUC,KAAKE,EAEpC,OACI,kBAAC,IAAD,CACInC,MAAOA,EACPoC,KAAM,CAAER,QAAOC,SAAQK,IAAGC,WAK1C,O,MClEhBE,IAASC,OASL,kBAAC,EAAD,MACAzB,SAASC,eAAe,W","file":"static/js/main.35966d3d.chunk.js","sourcesContent":["// credits: https://towardsdatascience.com/facial-recognition-spa-for-bnk48-idol-group-using-react-and-face-api-js-ad62b43ec5b6\nimport * as faceapi from \"face-api.js\";\n\n/**\n * This function loads models from local folder\n */\nexport async function loadModels() {\n    const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n\n    try {\n        await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\n        await faceapi.loadFaceLandmarkTinyModel(MODEL_URL);\n        await faceapi.loadFaceRecognitionModel(MODEL_URL);\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\n/**\n * This function detects a face within given image\n * @return {Object} Consists of all information about detected image.\n */\nexport async function getFullFaceDescription(blob, inputSize = 512) {\n    let scoreThreshold = 0.5;\n    const OPTION = new faceapi.TinyFaceDetectorOptions({\n        inputSize,\n        scoreThreshold,\n    });\n    const useTinyModel = true;\n    try {\n        let img = await faceapi.fetchImage(blob.src);\n        let fullDesc = await faceapi\n            .detectAllFaces(img, OPTION)\n            .withFaceLandmarks(useTinyModel)\n            .withFaceDescriptors();\n        return fullDesc;\n    } catch (error) {\n        console.log(\"error: \", error.message);\n    }\n}\n","import { useRef, useEffect } from \"react\";\n\n/**\n * A custom hook that checks if component renders component or not.\n */\nexport const useIsMount = () => {\n    const isMountRef = useRef(true);\n    useEffect(() => {\n        isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n};\n","import React, { useState, useEffect } from \"react\";\nimport ProcessImage from \"react-imgpro\";\nimport { loadModels, getFullFaceDescription } from \"../faceApi\";\nimport { useIsMount } from \"../Custom Hook/useIsMount\";\n\nconst App = () => {\n    const [image, setImage] = useState(null);\n    const [detectedFaces, setDetectedFaces] = useState([]);\n\n    const isMount = useIsMount();\n    useEffect(() => {\n        const checkIsMount = async () => {\n            if (isMount) {\n                await loadModels();\n            } else {\n                if (image) {\n                    await handleImage();\n                }\n            }\n        };\n        checkIsMount();\n    }, [image]);\n\n    const handleImage = async () => {\n        const input = document.getElementById(\"input-img\");\n        await getFullFaceDescription(input).then((fullDesc) => {\n            setDetectedFaces(fullDesc);\n        });\n    };\n\n    return (\n        <div>\n            <input\n                type=\"file\"\n                multiple={false}\n                onClick={() => {\n                    setImage(null);\n                    setDetectedFaces([]);\n                }}\n                onChange={(event) => {\n                    setImage(URL.createObjectURL(event.target.files[0]));\n                }}\n            />\n            {\n                <div>\n                    <div>\n                        <h1>Your Image</h1>\n                    </div>\n                    <img\n                        id=\"input-img\"\n                        src={image ? image : \"#\"}\n                        alt={image ? \"face\" : \"\"}\n                        style={{ width: \"400px\", height: \"auto\" }}\n                    ></img>\n                </div>\n            }\n            {image ? (\n                <div>\n                    <div>\n                        <h1>Cropped Image</h1>\n                    </div>\n                    {detectedFaces.map((detectedFace) => {\n                        let width = detectedFace.detection._box.width;\n                        let height = detectedFace.detection._box.height;\n                        let x = detectedFace.detection._box.x;\n                        let y = detectedFace.detection._box.y;\n\n                        return (\n                            <ProcessImage\n                                image={image}\n                                crop={{ width, height, x, y }}\n                            />\n                        );\n                    })}\n                </div>\n            ) : null}\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport App from \"./Components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { About } from \"./Components/About\";\nimport { Contact } from \"./Components/Contact\";\nimport { Page404 } from \"./Components/Page404\";\n\nReactDOM.render(\n    // <Router>\n    //     <Switch>\n    //         <Route exact path=\"/\" component={App} />\n    //         <Route path=\"/about\" component={About} />\n    //         <Route path=\"/contact\" component={Contact} />\n    //         <Route component={Page404} />\n    //     </Switch>\n    // </Router>,\n    <App />,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}